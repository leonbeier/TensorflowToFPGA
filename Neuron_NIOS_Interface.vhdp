Component Neuron_NIOS_Interface
(
    Generic
    (
        MAX_Input_Number   : NATURAL := 784;  --max. x neurons in any layer except for output layer
        MAX_Output_Number  : NATURAL := 128;  --max. x neurons in any layer except for input layer
    );
    
    --NIOS Interface (Could be done with custom IP like avalon pwm to optimize)
    pi_export                  : OUT   STD_LOGIC_VECTOR(31 downto 0) := (others => 'X');  --Address (15 downto 0), Output Valid (16), Input Data Finished(17)
    po_export                  : IN    STD_LOGIC_VECTOR(31 downto 0) := (others => 'X');  --Input Number (16 downto 0), Run(17), Valid (18), Next Neuron(19), Next Layer(20), Finish(21)
    po2_export                 : IN    STD_LOGIC_VECTOR(31 downto 0) := (others => 'X');  --Weight (directly set vector without combining)
    po3_export                 : IN    STD_LOGIC_VECTOR(31 downto 0) := (others => 'X');  --Bias (directly set vector without combining)
    
    --Input Data (Is saved in internal RAM)
    Busy                       : OUT   STD_LOGIC := '0';
    Data_In                    : IN    UNSIGNED(Neuron_Width-1 downto 0);
    In_Addr                    : IN    NATURAL   range 0 to MAX_Input_Number-1 := 0;
    In_Valid                   : IN    STD_LOGIC := '0';
    Finished                   : IN    STD_LOGIC := '0';
    
    --Output Data (Can be read from RAM)
    Data_Out                   : OUT   UNSIGNED(Neuron_Width-1 downto 0);
    Out_Addr                   : IN    NATURAL   range 0 to MAX_Output_Number-1 := 0;
    Out_Valid                  : OUT   STD_LOGIC := '0';
)
{
    --Procedure:
    --0. Write Input Data in RAM while Busy = '0' -> Finished = '1'
    --1. Start
    --   Run          = '1'
    --   Input_Number = Number of Input Values
    --2. Calculate
    --   Run          = '0'
    --   Input_Number = Number of Values in current layer (hidder or output)
    --   When Valid changes value -> IValid = true and takes Weight, Input and Bias to calculate
    --   When Next Neuron changes to '1' -> saves neuron output in ram
    --   When Next Layer changes to '1' -> moves data from output to input ram
    
    SIGNAL Input_Number          : NATURAL   range 0 to MAX_Input_Number := 0;
    SIGNAL Current_Neuron        : NATURAL   range 0 to MAX_Input_Number := 0;
    
    TYPE state_type IS (fill, start, run);
    Process ()
    {
        If(falling_edge(CLK))
        {
            VARIABLE myState : state_type := fill;
            Case(myState)
            {
                When(fill)
                {
                    If(Finished = '1')
                    {
                        myState       := start;
                        in_ram_write  <= '0';
                    }
                    Else
                    {
                        Busy <= '0';
                        in_ram_data_i <= Data_In;
                        in_ram_addr   <= In_Addr;
                        in_ram_write  <= In_Valid;
                        
                        Data_Out <= out_ram_data_o;
                        out_ram_addr <= Out_Addr;
                        
                        Neuron_Run     <= '0';
                    }
                }
                When(start)
                {
                    If(po_export(17) = '1')
                    {
                        --Save number of input values
                        Input_Number <= TO_INTEGER(UNSIGNED(po_export(16 downto 0)));
                        myState      := run;
                        Neuron_Run   <= '1';
                        Current_Neuron <= 0;
                        Last_Neuron    := 0;
                    }
                }
                When(run)
                {
                    If(po_export(21) = '1')
                    {
                        Out_Valid <= '1';
                        myState   := fill;
                    }
                    If(po_export(20) = '1')
                    {
                        VARIABLE next_layer : BOOLEAN := false;
                        --Save number of input bits from the previous layer
                        Input_Number <= TO_INTEGER(UNSIGNED(po_export(16 downto 0)));
                        next_layer := true;
                        shift_addr := 0;
                    }
                    If(po_export(19) = '1')
                    {
                        VARIABLE end_neuron  : BOOLEAN := false;
                        VARIABLE Last_Neuron : NATURAL   range 0 to MAX_Input_Number := 0;
                        end_neuron := true;
                        --Save number of next neuron to calculate
                        Last_Neuron := Current_Neuron;
                        Current_Neuron <= TO_INTEGER(UNSIGNED(po_export(16 downto 0)));
                    }
                    
                    pi_export(16)  <= Neuron_OValid;

                    If(end_neuron)
                    {
                        If(Neuron_OValid = '1')
                        {
                            out_ram_data_i <= Neuron_Output;
                            out_ram_addr   <= Last_Neuron;
                            out_ram_write  <= '1';
                            end_neuron     := false;
                        }
                    }
                    Else
                    {
                        out_ram_write  <= '0';
                        Neuron_Run     <= '0';
                    }
                    
                    VARIABLE valid_reg : STD_LOGIC := '0';
                    If(valid_reg /= po_export(18))
                    {
                        Neuron_IValid <= '1';
                        Neuron_Run  <= '1';
                    }
                    Else
                    {
                        Neuron_IValid <= '0';
                    }
                    valid_reg := po_export(18);
                    
                    in_ram_addr <= Neuron_Address;
                    
                    If(next_layer)
                    {
                        pi_export(16)  <= '0';
                        VARIABLE shift_addr : NATURAL   range 0 to MAX_Output_Number := 0;
                        
                        if(shift_addr > 0){
                            in_ram_write  <= '1';
                            in_ram_data_i <= out_ram_data_o;
                            in_ram_addr   <= out_ram_addr;
                        }

                        If(shift_addr = Input_Number)
                        {
                            in_ram_write   <= '0';
                            pi_export(16)  <= '1';
                            next_layer     := false;
                        }
                        Else
                        {
                            out_ram_addr   <= shift_addr;
                            shift_addr     := shift_addr + 1;
                        }
                    }
                }
            }
        }
    }
    
    --NIOS Interface---------------------------------
    
    pi_export(15 downto 0) <= STD_LOGIC_VECTOR(TO_UNSIGNED(Neuron_Address, 16)); --Up to 65536 neurons in one layer
    
    pi_export(17)          <= Finished;

    Neuron_Weight          <= SIGNED(po2_export(Weight_Width-1 downto 0));
    Neuron_Bias            <= SIGNED(po3_export(Bias_Width-1 downto 0));

    --RAM---------------------------------
    
    TYPE in_ram_type IS ARRAY (0 to MAX_Input_Number-1) OF UNSIGNED(Neuron_Width-1 downto 0);
    SIGNAL in_ram        : in_ram_type;
    SIGNAL in_ram_write  : STD_LOGIC := '0';
    SIGNAL in_ram_addr   : NATURAL range 0 to MAX_Input_Number-1 := 0;
    SIGNAL in_ram_data_i : UNSIGNED(Neuron_Width-1 downto 0);
    SIGNAL in_ram_data_o : UNSIGNED(Neuron_Width-1 downto 0);
    
    Process ()
    {
        If(in_ram_write = '1')
        {
            in_ram(in_ram_addr) <= in_ram_data_i;
        }
    }
    
    in_ram_data_o <= in_ram(in_ram_addr);
    
    TYPE out_ram_type IS ARRAY (0 to MAX_Output_Number-1) OF UNSIGNED(Neuron_Width-1 downto 0);
    SIGNAL out_ram        : in_ram_type;
    SIGNAL out_ram_write  : STD_LOGIC := '0';
    SIGNAL out_ram_addr   : NATURAL range 0 to MAX_Output_Number-1 := 0;
    SIGNAL out_ram_data_i : UNSIGNED(Neuron_Width-1 downto 0);
    SIGNAL out_ram_data_o : UNSIGNED(Neuron_Width-1 downto 0);
    
    Process ()
    {
        If(out_ram_write = '1')
        {
            out_ram(out_ram_addr) <= out_ram_data_i;
        }
    }
    
    out_ram_data_o <= out_ram(out_ram_addr);
    
    --Calculate---------------------------------
    
    SIGNAL Neuron_Run              : STD_LOGIC := '0';
    SIGNAL Neuron_IValid           : STD_LOGIC := '0';
    SIGNAL Neuron_Weight           : SIGNED    (Weight_Width-1 downto 0);
    SIGNAL Neuron_Bias             : SIGNED    (Bias_Width-1 downto 0);
    SIGNAL Neuron_OValid           : STD_LOGIC := '0';
    SIGNAL Neuron_Address          : NATURAL   range 0 to MAX_Input_Number-1 := 0;
    SIGNAL Neuron_Output           : UNSIGNED  (Neuron_Width-1 downto 0);
    NewComponent Neuron
    (
        MAX_Input_Number => MAX_Input_Number,

        Run              => Neuron_Run,
        Input_N          => Input_Number,
        IValid           => Neuron_IValid,
        Input            => in_ram_data_o,
        Weight           => Neuron_Weight,
        Bias             => Neuron_Bias,
        OValid           => Neuron_OValid,
        Address          => Neuron_Address,
        Output           => Neuron_Output,
    );
}