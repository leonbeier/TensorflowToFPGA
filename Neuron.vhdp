Component Neuron
(
    Include
    (
        IEEE.STD_LOGIC_1164.ALL,
        IEEE.numeric_std.all,
        IEEE.math_real.all,
        Neuron_Package.all,
        Sigmoid_Package.all,
    );
    
    Package Neuron_Package
    (
        CONSTANT Neuron_Width : NATURAL := 16;    --x bit neuron values
        CONSTANT Weight_Width : NATURAL := 16;    --x bit weight values
        CONSTANT Bias_Width   : NATURAL := 16;    --x bit bias value
        TYPE Neuron_Inputs IS ARRAY (natural range <>) OF UNSIGNED(Neuron_Width-1 downto 0);
        TYPE Neuron_Weights IS ARRAY (natural range <>) OF SIGNED(Weight_Width-1 downto 0);
    );

    Generic
    (
        MAX_Input_Number  : NATURAL := 128;  --max. x neurons in any layer
    );
    
    Run     : IN  STD_LOGIC := '0';                           --Set to '1' for calculation
    Input_N : IN  NATURAL range 0 to MAX_Input_Number := 0;   --Number of neurons in previous layer
    IValid  : IN  STD_LOGIC := '0';                           --Set to '1' if the input, weight and bias data are correct for the current address
    Input   : IN  UNSIGNED(Neuron_Width-1 downto 0);          --Values of neurons from previous layer
    Weight  : IN  SIGNED(Weight_Width-1 downto 0);            --Weights for neurons from the previous layer
    Bias    : IN  SIGNED(Bias_Width-1 downto 0);              --Bias for this neuron
    
    OValid  : BUFFER STD_LOGIC := '0';                           --'1' if
    Address : BUFFER NATURAL range 0 to MAX_Input_Number-1 := 0;  --Address of neuron in previous layer (with 100 inputs and 10 operations = 0, 10, 20, ...)
    Output  : OUT UNSIGNED(Neuron_Width-1 downto 0);
)
{
    TYPE state IS (start, calc, sig);
    
    CONSTANT Sigmoid_Res : NATURAL := 12;
    CONSTANT sum_bits  : NATURAL := integer(ceil(log2(real(Max_Input_Number+1)))) + Neuron_Width;
    
    Process ()
    {
        VARIABLE cur_state : state := start;
        
        VARIABLE sum       : SIGNED(sum_bits-1 downto 0);
        VARIABLE sum_v     : INTEGER range -1 * 2**(sum_bits-1) to 2**(sum_bits-1) - 1;
        
        If(cur_state = start)
        {
            If(Run = '1')
            {
                Address   <= 0;
                OValid    <= '0';
                sum       := (others => '0');
                cur_state := calc;
            }
        }
        
        If(cur_state = calc)
        {
            If(IValid = '1')
            {
                sum     := sum + TO_SIGNED(TO_INTEGER(Input)*TO_INTEGER(Weight), Neuron_Width+Weight_Width)(Neuron_Width+Weight_Width-1 downto Weight_Width);
                If(Address < Input_N-2)
                {
                    Address <= Address + 1;
                }
                Else
                {
                        --Sum = Bias + Neuron(0) * Weight(0) + ... + Neuron(Input_N-1) * Weight(Input_N-1)
                    sum   := sum + Bias;
                    
                        --Sigmoid function from -16 to 16 with 16bit resolution * 2^16
                    sum_v := TO_INTEGER(sum(sum_bits-1 downto Neuron_Width+4-Sigmoid_Res));
                    If(sum_v > 1366)
                    {
                        Output <= (others => '1');
                        OValid <= '1';
                        cur_state := start;
                    }
                    Elsif(sum_v < -1508)
                    {
                        Output <= (others => '0');
                        OValid <= '1';
                        cur_state := start;
                    }
                    Else
                    {
                        sigmoid_addr <= sum_v+1508;
                        cur_state := sig;
                    }
                }
            }
        }
        Elsif(cur_state = sig)
        {
            Output <= TO_UNSIGNED(sigmoid_out, Output'LENGTH);
            OValid <= '1';
            cur_state := start;
        }
    }
    
    SIGNAL sigmoid_addr : NATURAL range 0 to 2874 := 0;
    SIGNAL sigmoid_out  : NATURAL range 0 to 65535 := 0;
    sigmoid_out <= sigmoid12(sigmoid_addr);
}